# slurm.conf file generated by configurator.html.
# Put this file on all nodes of your cluster.
# See the slurm.conf man page for more information.
#
ClusterName={{  pillar['slurm']['ClusterName'] }}
ControlMachine={{  pillar['slurm']['ControlMachine'] }}
ControlAddr={{  pillar['slurm']['ControlAddr'] }}
{% if 'BackupController' in pillar['slurm']  -%}
BackupController={{ salt['pillar.get']('slurm:BackupController','' )}}
BackupAddr={{ salt['pillar.get']('slurm:BackupAddr','' )}}
{% endif -%}
{% if salt['pillar.get']('slurm:AuthType') in ['munge','none','authd'] -%}
AuthType=auth/{{ salt['pillar.get']('slurm:AuthType')}}
{% endif -%}
{% if salt['pillar.get']('slurm:CryptoType') in ['munge','openssl'] -%}
CryptoType=crypto/{{salt['pillar.get']('slurm:CryptoType') }}
{% endif -%}
CacheGroups=0
{% if salt['pillar.get']('slurm:CryptoType') in ['aix','blcr','none','ompi'] -%}
CheckpointType=checkpoint/{{salt['pillar.get']('slurm:CryptoType') }}
{% endif -%}
#DisableJobs=NO
#EnforcePartLimits=NO
#Epilog=
#EpilogSlurmctld=
#FirstJobId=1
#MaxJobId=999999
#GresTypes=
#GroupUpdateForce=0
#GroupUpdateTime=600
#JobCheckpointDir=/var/slurm/checkpoint
#JobCredentialPrivateKey=
#JobCredentialPublicCertificate=
#JobFileAppend=0
#JobRequeue=1
#JobSubmitPlugins=1
#KillOnBadExit=0
#Licenses=foo*4,bar
#MailProg=/bin/mail
#MaxJobCount=5000
#MaxStepCount=40000
#MaxTasksPerNode=128
MpiDefault=none
#MpiParams=ports=#-#
PluginDir=/usr/lib64/slurm
#PlugStackConfig=
#PrivateData=jobs
ProctrackType={{ salt['pillar.get']('slurm_config:ProctrackType','proctrack/cgroup' )}}
#Prolog=
#PrologSlurmctld=
#PropagatePrioProcess=0
#PropagateResourceLimits=
#PropagateResourceLimitsExcept=
ReturnToService=2
#SallocDefaultCommand=
SlurmctldPidFile=/var/run/slurm/slurmctld.pid
SlurmctldPort=6817
SlurmdPidFile=/var/run/slurm/slurmd.pid
SlurmdPort=6818
SlurmdSpoolDir=/tmp/slurmd.%n.spool
SlurmUser=slurm
#SlurmdUser=
#SrunEpilog=
#SrunProlog=
StateSaveLocation=/tmp
SwitchType=switch/none
#TaskEpilog=
{% if salt['pillar.get']('slurm:TaskPlugin') in ['affinity','none','cgroup'] -%}
TaskPlugin=task/{{ salt['pillar.get']('slurm:TaskPlugin')}}
{% else -%}
TaskPlugin=task/none
{% endif -%}
#TaskProlog=
{% if salt['pillar.get']('slurm:TopologyPlugin') in ['tree','none','3d_torus'] -%}
TopologyPlugin=topology/{{ salt['pillar.get']('slurm:TopologyPlugin')}}
{% else -%}
TopologyPlugin=topology/none
{% endif -%}
#TmpFs=/tmp
#TrackWCKey=no
#TreeWidth=
#UnkillableStepProgram=
#UsePAM=0
#
#
# TIMERS
#BatchStartTimeout=10
#CompleteWait=0
#EpilogMsgTime=2000
#GetEnvTimeout=2
#HealthCheckInterval=0
#HealthCheckProgram=
InactiveLimit=0
KillWait=30
#MessageTimeout=10
#ResvOverRun=0
MinJobAge=300
#OverTimeLimit=0
SlurmctldTimeout=120
SlurmdTimeout=300
#UnkillableStepTimeout=60
#VSizeFactor=0
Waittime=0
#
#
# SCHEDULING
#DefMemPerCPU=0
FastSchedule=1
#MaxMemPerCPU=0
#SchedulerFilter=1
#SchedulerTimeSlice=30
SchedulerType=sched/backfill
#SchedulerType=sched/builtin
#SchedulerPort=7321
SelectType=select/cons_res
SelectTypeParameters=CR_Core
PreemptType=preempt/partition_prio
PreemptMode=GANG,SUSPEND
#
#
# JOB PRIORITY
PriorityType=priority/basic
#PriorityDecayHalfLife=
#PriorityCalcPeriod=
#PriorityFavorSmall=
#PriorityMaxAge=
#PriorityUsageResetPeriod=
#PriorityWeightAge=
#PriorityWeightFairshare=
#PriorityWeightJobSize=
#PriorityWeightPartition=
#PriorityWeightQOS=
#
#
# LOGGING AND ACCOUNTING
AccountingStorageEnforce=1
#AccountingStorageEnforce=limits
AccountingStorageHost={{ pillar['slurm']['AccountingStorageHost'] }}
AccountingStorageLoc=slurm_acct_db
AccountingStoragePass=/var/run/munge/munge.socket.2
AccountingStoragePort=6819
AccountingStorageType=accounting_storage/{{ salt['pillar.get']('slurm:AccountingStorageType','filetxt' )}}
AccountingStorageUser={{ pillar['slurm']['AccountingStorageUser'] }}
AccountingStoreJobComment=YES

#DebugFlags=
#JobCompHost=
JobCompLoc={{ salt['pillar.get']('slurm:JobCompLoc','/var/log/slurm_jobcomp.log' )}}
#JobCompLoc=
#JobCompPass=
#JobCompPort=
JobCompType=jobcomp/filetxt
#JobCompUser=
JobAcctGatherFrequency=30
JobAcctGatherType=jobacct_gather/linux
SlurmctldDebug=3
SlurmctldLogFile={{ salt['pillar.get']('slurm:SlurmctldLogFile','/var/log/slurmctld.log' )}}
SlurmdDebug=3
SlurmdLogFile=/var/log/slurm/slurmd.%n.log.%h
#SlurmSchedLogFile=
#SlurmSchedLogLevel=
#
#
# POWER SAVE SUPPORT FOR IDLE NODES (optional)
#SuspendProgram=
#ResumeProgram=
#SuspendTimeout=
#ResumeTimeout=
#ResumeRate=
#SuspendExcNodes=
#SuspendExcParts=
#SuspendRate=
#SuspendTime=
#
#
# COMPUTE NODES

NodeName={{ pillar['slurm']['ControlMachine'] }} State=DOWN
{% if pillar['slurm']['BackupController'] is defined -%}
NodeName={{ pillar['slurm']['BackupController'] }} State=DOWN
{%- endif %}
 {% if pillar['slurm']['partitions'] is defined -%}
        {%- for partition, partitioninfo in pillar['slurm']['partitions'].iteritems() -%}
                {% set nodes=[] -%}
                {% set params={} -%}
                {% for key, value in  partitioninfo.iteritems() -%}
                        {% if key == "nodes" -%}
                                {%- for node, nodeinfo in  value.iteritems() %}
NodeName={{ node }} {% for key, value in nodeinfo.iteritems()  %} {{ key }}={{ value }} {% endfor %}
                                        {%- do  nodes.append(node) -%}
                                {% endfor -%}
                        {% else -%}
                                 {%- do  params.update({ key : value }) -%}
                        {% endif -%}
                {% endfor %}
PartitionName={{ partition }} Nodes={{ ','.join(nodes) }}{% for key, value in  params.iteritems() %} {{key}}={{value}}{% endfor %}
        {% endfor %}
{% endif -%}



